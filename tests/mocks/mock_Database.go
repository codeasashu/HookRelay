// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"
)

// MockDatabase is an autogenerated mock type for the Database type
type MockDatabase struct {
	mock.Mock
}

type MockDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabase) EXPECT() *MockDatabase_Expecter {
	return &MockDatabase_Expecter{mock: &_m.Mock}
}

// BeginTx provides a mock function with given fields: _a0
func (_m *MockDatabase) BeginTx(_a0 context.Context) (*sqlx.Tx, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 *sqlx.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*sqlx.Tx, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *sqlx.Tx); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_BeginTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTx'
type MockDatabase_BeginTx_Call struct {
	*mock.Call
}

// BeginTx is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockDatabase_Expecter) BeginTx(_a0 interface{}) *MockDatabase_BeginTx_Call {
	return &MockDatabase_BeginTx_Call{Call: _e.mock.On("BeginTx", _a0)}
}

func (_c *MockDatabase_BeginTx_Call) Run(run func(_a0 context.Context)) *MockDatabase_BeginTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDatabase_BeginTx_Call) Return(_a0 *sqlx.Tx, _a1 error) *MockDatabase_BeginTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_BeginTx_Call) RunAndReturn(run func(context.Context) (*sqlx.Tx, error)) *MockDatabase_BeginTx_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *MockDatabase) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockDatabase_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockDatabase_Expecter) Close() *MockDatabase_Close_Call {
	return &MockDatabase_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockDatabase_Close_Call) Run(run func()) *MockDatabase_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatabase_Close_Call) Return(_a0 error) *MockDatabase_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_Close_Call) RunAndReturn(run func() error) *MockDatabase_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function with no fields
func (_m *MockDatabase) GetDB() *sqlx.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 *sqlx.DB
	if rf, ok := ret.Get(0).(func() *sqlx.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.DB)
		}
	}

	return r0
}

// MockDatabase_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type MockDatabase_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
func (_e *MockDatabase_Expecter) GetDB() *MockDatabase_GetDB_Call {
	return &MockDatabase_GetDB_Call{Call: _e.mock.On("GetDB")}
}

func (_c *MockDatabase_GetDB_Call) Run(run func()) *MockDatabase_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatabase_GetDB_Call) Return(_a0 *sqlx.DB) *MockDatabase_GetDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_GetDB_Call) RunAndReturn(run func() *sqlx.DB) *MockDatabase_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// GetReadDB provides a mock function with no fields
func (_m *MockDatabase) GetReadDB() *sqlx.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetReadDB")
	}

	var r0 *sqlx.DB
	if rf, ok := ret.Get(0).(func() *sqlx.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.DB)
		}
	}

	return r0
}

// MockDatabase_GetReadDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReadDB'
type MockDatabase_GetReadDB_Call struct {
	*mock.Call
}

// GetReadDB is a helper method to define mock.On call
func (_e *MockDatabase_Expecter) GetReadDB() *MockDatabase_GetReadDB_Call {
	return &MockDatabase_GetReadDB_Call{Call: _e.mock.On("GetReadDB")}
}

func (_c *MockDatabase_GetReadDB_Call) Run(run func()) *MockDatabase_GetReadDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatabase_GetReadDB_Call) Return(_a0 *sqlx.DB) *MockDatabase_GetReadDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_GetReadDB_Call) RunAndReturn(run func() *sqlx.DB) *MockDatabase_GetReadDB_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function with given fields: tx, err
func (_m *MockDatabase) Rollback(tx *sqlx.Tx, err error) {
	_m.Called(tx, err)
}

// MockDatabase_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type MockDatabase_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - tx *sqlx.Tx
//   - err error
func (_e *MockDatabase_Expecter) Rollback(tx interface{}, err interface{}) *MockDatabase_Rollback_Call {
	return &MockDatabase_Rollback_Call{Call: _e.mock.On("Rollback", tx, err)}
}

func (_c *MockDatabase_Rollback_Call) Run(run func(tx *sqlx.Tx, err error)) *MockDatabase_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sqlx.Tx), args[1].(error))
	})
	return _c
}

func (_c *MockDatabase_Rollback_Call) Return() *MockDatabase_Rollback_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDatabase_Rollback_Call) RunAndReturn(run func(*sqlx.Tx, error)) *MockDatabase_Rollback_Call {
	_c.Run(run)
	return _c
}

// NewMockDatabase creates a new instance of MockDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabase(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockDatabase {
	mock := &MockDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
